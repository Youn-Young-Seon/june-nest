---
description: 
globs: 
alwaysApply: true
---
# Promise and Async/Await Best Practices Guidelines

## Overview
This project should follow best practices for JavaScript/TypeScript Promise handling and async/await patterns. These guidelines promote maintainable, performant, and error-resistant asynchronous code.

## Core Principles

### 1. Prefer async/await over Promise chains
```typescript
// ✅ GOOD: Clear and readable async/await
async function fetchUserData(userId: number): Promise<User> {
  try {
    const response = await fetch(`/api/users/${userId}`);
    const userData = await response.json();
    return userData;
  } catch (error) {
    console.error('Failed to fetch user data:', error);
    throw error;
  }
}

// ❌ BAD: Complex Promise chains
function fetchUserData(userId: number): Promise<User> {
  return fetch(`/api/users/${userId}`)
    .then(response => response.json())
    .then(userData => userData)
    .catch(error => {
      console.error('Failed to fetch user data:', error);
      throw error;
    });
}
```

### 2. Always handle errors properly
```typescript
// ✅ GOOD: Comprehensive error handling
async function processUser(userId: number): Promise<ProcessedUser> {
  try {
    const user = await fetchUser(userId);
    
    if (!user) {
      throw new Error(`User not found: ${userId}`);
    }
    
    const processed = await processUserData(user);
    return processed;
  } catch (error) {
    // Log the error with context
    console.error(`Failed to process user ${userId}:`, error);
    // Re-throw to allow upper layers to handle
    throw error;
  }
}

// ❌ BAD: Silent error handling
async function processUser(userId: number): Promise<ProcessedUser | null> {
  try {
    const user = await fetchUser(userId);
    return await processUserData(user);
  } catch (error) {
    console.log('Error occurred'); // No context, swallows error
    return null; // Hides the error
  }
}
```

## Performance Optimization

### 1. Use parallel processing when possible
```typescript
// ✅ GOOD: Parallel execution with Promise.all
async function fetchUserProfile(userId: number): Promise<UserProfile> {
  const [user, profile, posts] = await Promise.all([
    fetchUser(userId),
    fetchProfile(userId),
    fetchPosts(userId)
  ]);
  
  return { user, profile, posts };
}

// ❌ BAD: Sequential execution
async function fetchUserProfile(userId: number): Promise<UserProfile> {
  const user = await fetchUser(userId);
  const profile = await fetchProfile(userId);
  const posts = await fetchPosts(userId);
  
  return { user, profile, posts };
}
```

### 2. Use Promise.allSettled for resilient parallel processing
```typescript
// ✅ GOOD: Resilient parallel processing
async function fetchUserDataSafely(userId: number): Promise<PartialUserData> {
  const results = await Promise.allSettled([
    fetchUser(userId),
    fetchProfile(userId),
    fetchPosts(userId)
  ]);
  
  const userData: PartialUserData = {};
  
  results.forEach((result, index) => {
    const keys = ['user', 'profile', 'posts'] as const;
    if (result.status === 'fulfilled') {
      userData[keys[index]] = result.value;
    } else {
      console.error(`Failed to fetch ${keys[index]}:`, result.reason);
      userData[keys[index]] = null;
    }
  });
  
  return userData;
}
```

### 3. Implement proper concurrency control
```typescript
// ✅ GOOD: Controlled concurrency for large datasets
async function processBatch<T, R>(
  items: T[],
  processor: (item: T) => Promise<R>,
  concurrency: number = 3
): Promise<R[]> {
  const results: R[] = [];
  
  for (let i = 0; i < items.length; i += concurrency) {
    const batch = items.slice(i, i + concurrency);
    const batchPromises = batch.map(item => processor(item));
    const batchResults = await Promise.allSettled(batchPromises);
    
    batchResults.forEach((result, index) => {
      if (result.status === 'fulfilled') {
        results.push(result.value);
      } else {
        console.error(`Failed to process item ${i + index}:`, result.reason);
      }
    });
  }
  
  return results;
}
```

## Error Handling Patterns

### 1. Create custom error classes
```typescript
// ✅ GOOD: Specific error types
class ValidationError extends Error {
  constructor(message: string, public field: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

class NetworkError extends Error {
  constructor(message: string, public statusCode: number) {
    super(message);
    this.name = 'NetworkError';
  }
}

async function validateAndProcess(data: UserData): Promise<ProcessedUser> {
  try {
    if (!data.email) {
      throw new ValidationError('Email is required', 'email');
    }
    
    const result = await processData(data);
    return result;
  } catch (error) {
    if (error instanceof ValidationError) {
      console.error(`Validation failed (${error.field}): ${error.message}`);
      throw error;
    }
    
    if (error instanceof NetworkError) {
      console.error(`Network error ${error.statusCode}: ${error.message}`);
      throw error;
    }
    
    // Unknown error
    console.error('Unknown error:', error);
    throw error;
  }
}
```

### 2. Implement retry logic with exponential backoff
```typescript
// ✅ GOOD: Robust retry mechanism
async function retryOperation<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  baseDelay: number = 1000
): Promise<T> {
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      if (attempt === maxRetries - 1) {
        throw error;
      }
      
      const delay = baseDelay * Math.pow(2, attempt);
      console.log(`Retry ${attempt + 1}/${maxRetries} after ${delay}ms`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw new Error('All retries failed');
}

// Usage
const result = await retryOperation(
  () => fetch('/api/unstable-endpoint').then(r => r.json()),
  3,
  1000
);
```

### 3. Implement timeout handling
```typescript
// ✅ GOOD: Timeout wrapper
function withTimeout<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {
  return Promise.race([
    promise,
    new Promise<never>((_, reject) => 
      setTimeout(() => reject(new Error('Operation timed out')), timeoutMs)
    )
  ]);
}

// Usage
try {
  const data = await withTimeout(
    fetch('/api/slow-endpoint').then(r => r.json()),
    5000
  );
} catch (error) {
  if (error.message === 'Operation timed out') {
    console.log('Request timed out');
  }
  throw error;
}
```

## TypeScript Best Practices

### 1. Use proper type annotations
```typescript
// ✅ GOOD: Explicit return types and error handling
interface ApiResponse<T> {
  data: T;
  status: number;
  message?: string;
}

async function fetchData<T>(url: string): Promise<ApiResponse<T>> {
  const response = await fetch(url);
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  const data = await response.json();
  return {
    data,
    status: response.status,
    message: response.statusText
  };
}
```

### 2. Use Result pattern for error handling
```typescript
// ✅ GOOD: Result pattern for type-safe error handling
type Result<T, E = Error> = {
  success: true;
  data: T;
} | {
  success: false;
  error: E;
};

async function safeOperation<T>(
  operation: () => Promise<T>
): Promise<Result<T>> {
  try {
    const data = await operation();
    return { success: true, data };
  } catch (error) {
    return { success: false, error: error as Error };
  }
}

// Usage
const result = await safeOperation(() => 
  fetch('/api/data').then(r => r.json())
);

if (result.success) {
  console.log(result.data); // Type-safe access
} else {
  console.error(result.error.message); // Type-safe error handling
}
```

### 3. Use conditional types for flexible APIs
```typescript
// ✅ GOOD: Conditional types for flexible Promise handling
type MaybePromise<T> = T | Promise<T>;

async function processValue<T>(value: MaybePromise<T>): Promise<T> {
  return Promise.resolve(value);
}

// Generic promise utilities
type PromiseType<T> = T extends Promise<infer U> ? U : T;

function createAsyncFunction<T extends (...args: any[]) => any>(
  syncFn: T
): (...args: Parameters<T>) => Promise<PromiseType<ReturnType<T>>> {
  return async (...args) => {
    return Promise.resolve(syncFn(...args));
  };
}
```

## Anti-Patterns to Avoid

### 1. Promise Constructor Anti-pattern
```typescript
// ❌ BAD: Unnecessary Promise constructor
function fetchData(url: string): Promise<any> {
  return new Promise((resolve, reject) => {
    fetch(url)
      .then(response => response.json())
      .then(data => resolve(data))
      .catch(error => reject(error));
  });
}

// ✅ GOOD: Direct promise return
function fetchData(url: string): Promise<any> {
  return fetch(url).then(response => response.json());
}
```

### 2. forEach with async/await anti-pattern
```typescript
// ❌ BAD: forEach doesn't wait for async operations
async function processUsers(users: User[]): Promise<ProcessedUser[]> {
  const results: ProcessedUser[] = [];
  
  users.forEach(async (user) => {
    const processed = await processUser(user);
    results.push(processed); // Order not guaranteed, results may be empty
  });
  
  return results; // Returns immediately, before processing
}

// ✅ GOOD: Use for...of for sequential processing
async function processUsers(users: User[]): Promise<ProcessedUser[]> {
  const results: ProcessedUser[] = [];
  
  for (const user of users) {
    const processed = await processUser(user);
    results.push(processed);
  }
  
  return results;
}

// ✅ GOOD: Use Promise.all for parallel processing
async function processUsers(users: User[]): Promise<ProcessedUser[]> {
  return Promise.all(users.map(user => processUser(user)));
}
```

### 3. Nested Promise anti-pattern
```typescript
// ❌ BAD: Nested promises (callback hell)
function processUserData(userId: number): Promise<UserData> {
  return fetchUser(userId)
    .then(user => {
      return fetchProfile(user.id)
        .then(profile => {
          return fetchPosts(user.id)
            .then(posts => {
              return { user, profile, posts };
            });
        });
    });
}

// ✅ GOOD: Flat async/await structure
async function processUserData(userId: number): Promise<UserData> {
  const user = await fetchUser(userId);
  const profile = await fetchProfile(user.id);
  const posts = await fetchPosts(user.id);
  return { user, profile, posts };
}
```

### 4. Unnecessary await anti-pattern
```typescript
// ❌ BAD: Unnecessary await on return
async function fetchAndReturn(url: string): Promise<any> {
  const response = await fetch(url);
  return await response.json(); // Unnecessary await
}

// ✅ GOOD: Return promise directly
async function fetchAndReturn(url: string): Promise<any> {
  const response = await fetch(url);
  return response.json();
}

// ✅ EVEN BETTER: No async needed if just returning
function fetchAndReturn(url: string): Promise<any> {
  return fetch(url).then(response => response.json());
}
```

## Caching and Memoization

### 1. Implement TTL caching
```typescript
// ✅ GOOD: Time-based caching
class TTLCache<T> {
  private cache = new Map<string, { value: T; expiry: number }>();
  
  constructor(private ttl: number = 60000) {} // Default 1 minute
  
  set(key: string, value: T): void {
    const expiry = Date.now() + this.ttl;
    this.cache.set(key, { value, expiry });
  }
  
  get(key: string): T | null {
    const item = this.cache.get(key);
    if (!item) return null;
    
    if (Date.now() > item.expiry) {
      this.cache.delete(key);
      return null;
    }
    
    return item.value;
  }
}

const apiCache = new TTLCache<any>(300000); // 5 minutes

async function cachedApiCall(url: string): Promise<any> {
  const cached = apiCache.get(url);
  if (cached) {
    return cached;
  }
  
  const data = await fetch(url).then(r => r.json());
  apiCache.set(url, data);
  return data;
}
```

### 2. Implement promise memoization
```typescript
// ✅ GOOD: Promise memoization to prevent duplicate requests
class PromiseMemoizer<T> {
  private cache = new Map<string, Promise<T>>();
  
  async memoize(key: string, promiseFactory: () => Promise<T>): Promise<T> {
    if (this.cache.has(key)) {
      return this.cache.get(key)!;
    }
    
    const promise = promiseFactory();
    this.cache.set(key, promise);
    
    try {
      const result = await promise;
      return result;
    } catch (error) {
      // Remove failed promise from cache
      this.cache.delete(key);
      throw error;
    }
  }
}

const memoizer = new PromiseMemoizer<User>();

async function fetchUser(userId: number): Promise<User> {
  return memoizer.memoize(`user:${userId}`, () =>
    fetch(`/api/users/${userId}`).then(r => r.json())
  );
}
```

## Testing Async Code

### 1. Test async functions properly
```typescript
// ✅ GOOD: Proper async testing
describe('UserService', () => {
  it('should fetch user data correctly', async () => {
    // Arrange
    const mockUser = { id: 1, name: 'John Doe' };
    jest.spyOn(fetch, 'fetch').mockResolvedValue({
      ok: true,
      json: async () => mockUser
    } as Response);
    
    // Act
    const result = await fetchUser(1);
    
    // Assert
    expect(result).toEqual(mockUser);
    expect(fetch).toHaveBeenCalledWith('/api/users/1');
  });
  
  it('should handle errors correctly', async () => {
    // Arrange
    jest.spyOn(fetch, 'fetch').mockRejectedValue(new Error('Network error'));
    
    // Act & Assert
    await expect(fetchUser(1)).rejects.toThrow('Network error');
  });
});
```

### 2. Test error handling and retries
```typescript
// ✅ GOOD: Testing retry logic
describe('retryOperation', () => {
  it('should retry on failure and succeed', async () => {
    let attempts = 0;
    const operation = jest.fn().mockImplementation(async () => {
      attempts++;
      if (attempts < 3) {
        throw new Error('Temporary failure');
      }
      return 'success';
    });
    
    const result = await retryOperation(operation, 3, 100);
    
    expect(result).toBe('success');
    expect(operation).toHaveBeenCalledTimes(3);
  });
});
```

## Integration with NestJS

### 1. Service layer best practices
```typescript
// ✅ GOOD: Service with proper error handling
@Injectable()
export class UserService {
  constructor(private readonly apiClient: ApiClient) {}
  
  async getUser(id: number): Promise<User> {
    try {
      const user = await this.apiClient.get<User>(`/users/${id}`);
      return this.transformUser(user);
    } catch (error) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }
  }
  
  async createUser(userData: CreateUserDto): Promise<User> {
    try {
      const user = await this.apiClient.post<User>('/users', userData);
      return this.transformUser(user);
    } catch (error) {
      if (error.status === 409) {
        throw new ConflictException('User already exists');
      }
      throw new InternalServerErrorException('Failed to create user');
    }
  }
  
  private transformUser(rawUser: any): User {
    return {
      id: rawUser.id,
      name: rawUser.name,
      email: rawUser.email,
      createdAt: new Date(rawUser.created_at),
      updatedAt: new Date(rawUser.updated_at)
    };
  }
}
```

### 2. Controller layer best practices
```typescript
// ✅ GOOD: Controller with proper async handling
@Controller('users')
export class UserController {
  constructor(private readonly userService: UserService) {}
  
  @Get()
  async getUsers(@Query() query: GetUsersQuery): Promise<User[]> {
    try {
      return await this.userService.getUsers(query);
    } catch (error) {
      throw new BadRequestException('Failed to fetch users');
    }
  }
  
  @Post()
  async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {
    return this.userService.createUser(createUserDto);
  }
  
  @Get(':id')
  async getUser(@Param('id', ParseIntPipe) id: number): Promise<User> {
    return this.userService.getUser(id);
  }
}
```

## Performance Monitoring

### 1. Add performance timing
```typescript
// ✅ GOOD: Performance monitoring
async function withTiming<T>(
  operation: () => Promise<T>,
  operationName: string
): Promise<T> {
  const start = performance.now();
  
  try {
    const result = await operation();
    const duration = performance.now() - start;
    console.log(`${operationName} completed in ${duration.toFixed(2)}ms`);
    return result;
  } catch (error) {
    const duration = performance.now() - start;
    console.error(`${operationName} failed after ${duration.toFixed(2)}ms:`, error);
    throw error;
  }
}

// Usage
const userData = await withTiming(
  () => fetchUserData(userId),
  'fetchUserData'
);
```

## Summary

Key principles to follow:

1. **Always use async/await** over Promise chains for better readability
2. **Handle errors comprehensively** with proper logging and re-throwing
3. **Use parallel processing** when operations are independent
4. **Implement proper retry logic** with exponential backoff
5. **Add timeout handling** for network operations
6. **Use TypeScript types** for better error handling and API contracts
7. **Avoid common anti-patterns** like forEach with async/await
8. **Implement caching** for frequently accessed data
9. **Test async code properly** with proper mocking and error scenarios
10. **Monitor performance** and add appropriate logging

Following these guidelines will result in robust, maintainable, and performant asynchronous JavaScript/TypeScript code.

